%% create pde model object
model = createpde();
geometryFromEdges(model,@circleg);
applyBoundaryCondition(model,'dirichlet','Edge',1:model.Geometry.NumEdges,'u',0);
specifyCoefficients(model,'m',0,'d',0,'c',1,'a',0,'f',1);

%% generate mesh
hmax = 0.1;
generateMesh(model,'Hmax',hmax);
figure
pdemesh(model); 
axis equal

%% assemble matrices for the FEM 
FEM = assembleFEMatrices(model,'nullspace');
A = FEM.Kc;
b = FEM.Fc;
n = length(FEM.Kc);

%% solve using internal solver
u = A\b;
u_new = FEM.B*u + FEM.ud;

%% the randomized coordinate descent method
max_iter = 5*10^5;
prob = zeros(1,n);
residual_cd = [];

for i = 1 : n
    prob(i) = A(i,i)/trace(A);
end

% randomly initialize x
x_init = randn(n,1);
x = x_init;

for i = 1 : max_iter
    idx = rand_p(prob);
    x(idx) = x(idx) - (dot(A(idx,:),x)-b(idx)) / A(idx,idx);
    rel_err = norm(A*x-b) / norm(b);
    residual_cd = [residual_cd rel_err];
end
figure
plot(residual_cd);

%% plot the solution
figure
pdeplot(model,'XYData',u_new,'ZData',u_new)
u_cd = FEM.B*x + FEM.ud
figure
